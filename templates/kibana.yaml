{{- if eq .Values.ingress.enable "true" }}
---
apiVersion: v1
data:
  auth: "{{.Values.ingress.basic_auth_hash}}"
kind: Secret
metadata:
  name: {{.Values.service.name}}-basic-auth
type: Opaque

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{.Values.service.name}}
  annotations:
    {{.Values.ingress.lego_acme_annotation}}
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/auth-type: basic
    ingress.kubernetes.io/auth-secret: {{.Values.service.name}}-basic-auth
    ingress.kubernetes.io/auth-realm: "Kibana Authentication Required"
    external-dns.alpha.kubernetes.io/hostname: {{.Values.service.name}}.{{.Values.general.cluster_fqdn}}
spec:
  tls:
  - hosts:
    - {{.Values.service.name}}.{{.Values.general.cluster_fqdn}}
    secretName: {{.Values.service.name}}-tls
  rules:
  - host: {{.Values.service.name}}.{{.Values.general.cluster_fqdn}}
    http:
      paths:
      - backend:
          serviceName: {{.Values.service.name}}
          servicePort: {{.Values.kibana.port}}
        path: /
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{.Values.service.name}}
  labels:
    name: {{.Values.service.name}}
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Kibana"
spec:
  type: {{ .Values.service.type }}
  selector:
    name: {{.Values.service.name}}
  ports:
    - name: http
      port: {{.Values.kibana.port}}
      protocol: TCP

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{.Values.service.name}}
spec:
  replicas: {{.Values.kibana.replicas}}
  template:
    metadata:
      labels:
        name: {{.Values.service.name}}
    spec:
      containers:
      - name: {{.Values.service.name}}
        command: [ "/bin/bash", "-c", "/usr/share/kibana/bin/kibana-plugin remove x-pack; echo 'The optimization of kibana bundles may take up to 25 minutes to complete.'; /usr/local/bin/kibana-docker" ]
        # ^ remove xpack additions from official elastic.co kibana image
        image: {{.Values.kibana.image}}
        imagePullPolicy: Always
        resources:
          limits:
            cpu: {{.Values.kibana.cpu_limit}}
          requests:
            cpu: {{.Values.kibana.cpu_requests}}
        env:
          - name: "ELASTICSEARCH_URL"
            value: "{{.Values.elasticsearch.url}}"
          - name: "XPACK_GRAPH_ENABLED"
            value: "false"
          - name: "XPACK_MONITORING_ENABLED"
            value: "false"
          - name: "XPACK_REPORTING_ENABLED"
            value: "false"
          - name: "XPACK_SECURITY_ENABLED"
            value: "false"
        ports:
        - containerPort: {{.Values.kibana.container_port}}
          name: ui
          protocol: TCP
      {{- if .Values.tolerations }}
      tolerations:
      {{- range .Values.tolerations }}
      - key: {{ .key | default ("") }}
        value: {{ .value | default ("")}}
        operator: {{ .operator | default ("Equal") }}
        effect: {{ .effect  | default ("")}}
      {{- end }}
      {{- end }}


    {{- if eq .Values.kibana.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  name: {{.Values.service.name}}
      {{- else if eq .Values.kibana.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  name: {{.Values.service.name}}
      {{- end }}
